pythonNow book.
1- python tutorial objetives.
This course is designed to be taken by a person who does not know anything about programming and uses the python language as the first language to approach computer programming.

The fundamental objective of this tutorial is to allow the student to solve problems of different kinds(mathematical, administrative, games, accounting, etc.) using the computer as a tool.

It must be taken into account that to become a programmer you must travel a long path where each topic is fundamental for future concepts. It is important not to leave topics without understanding and relating.

Programming, unlike other subjects that you have studied such as history, requires a methodical and orderly study( in history you can study the middle ages without having great knowledge of the ancient age, this does not happen with learning programming).

Programming is a new activity for the student, there is no similar subject in primary and secondary studies.

It is good to be patient when problems are not completely resolved, but it is fundamentally important to dedicate time to individual analysis of the problems.

WHAT IS A PROGRAM?
Program: set of instructions that a computer understands to carry out an activity. Every program has a well-defined objetive: a word processor is a program that allows you to load, modify and print texts, a chess program allows you to play chess against the computer or another human opponent.
The fundamental activity of the programmer is to solve problems using the computer as a fundamental tool.

To solve a problem, an algorithm must be proposed.

ALGORITHM: These are steps to follow to solve problem.

FLOWCHART: A flowchart is the graphical representation of an algorithm.

The main graphic symbols to use for creating flowcharts are:

STATEMENT OF A PROBLEM USING A FLOW CHART.

To create a flow chart we must be very clear about the problem to be solved.
Example: CALCULATE THE MONTHLY SALARY OF AN OPERATOR KNOWING THE NUMBER OF HOURS WORKED AND THE PAYMENT PER HOUR.

we can identify:

Known data:
Hours worked in the month.
hourly.

Process:
Calculation of salary by multipliying the number of hours by the hourly payment.

Resulting information:
Montlhy salary.

If we do an analysis, every problem is made up of:
Known data: Data that is available when posing the problem.
Process: Operations to be performed with known data.
Resulting information: It is information that is obtained from the process and allows us to solve problem.

This way of expressing a problem by identifying its known data, processes and resulting information can become cumbersome for complex problems where there are many known data and processes. That is why it is much more effective to represent the steps to solve the problem using a flow chart.

It is much easier to understand a graph than a text.
The flowchart clearly identifies the input data, operations and output data.
In the example we have two input data: hoursWorked and CostHour, we represent the inputs with a parallelogram and we make a parallelogram for each input data.
The operation is represented with a rectangle, we must make a rectangle for each operation.
At the exit we represent it with the broken leaf.

The flow chart gives us an idea of the order of executation of activities over time. First we load the input data, then we do the necessary operations and finally we display the results.

VARIABLE: It is deposit where there is a value. It consists of a name and belongs to a data type.

For the example given, the variable hoursWorked stores the number of hours worked by the operator. The variable hourValue stores the price of an hour of work. The salary variable stores the salary to be paid to the operator.
In the example we have three variables.

VARIABLES TYPES.

A variable can store:

integer values(100, 260, etc.)
Real values (1.24, 2.90, 5.00, etc.)

Choosing a variable name:
We must choose representative variable names. In the example, the name HoursWorked is clear enough to give us a complete idea of its content. We can give it other good names.
Others are not so representative for example htr. Possibly we are solving a problem, this name reminds us that we store the hours worked by the operator, but when time passes and we read the diagram we will probably not remenber or understand what hTr means.

3- Flowchart coding in python.

The flow chart is our tool to be able to propose a solution to our to our problem.

In order to test our proposed solution to a problem using a flowchart, we must then code it in python.

We will start with very simple problems and preceed to implement your flowchart and then your coding.

Problem.
FIND THE SURFACE AREA OF A SQUARE KNOWING THE VALUE OF ONE SIDE.

From the main window of the python environment we proceed to create our second file exercise2.py, we save it as we saw in the previous concept and we code in python the following solution to the flowchart:

side=input("Enter the side measurement of the square:")
side=int(side)
surface=side*side
print("The area of the square is")
print(surface)

If we execute the program run ->run module, we can verify that keyboard input of the measurement of the side of the square is requested and then it shows us the surface depending on the value enteren:

To enter data by keyboard and display a message, the input function is used. This function returns all characters written by the program operator:
side=input("Enter the side measurement of the square:")
The side variable saves all the characters entered but not in numerical format, for this we must call the int function.

side=int(side)
Now the value entered by the operator is saved again in the side variable but in integer format that makes it possible to do mathematical operations with it.

A simplified format to enter an integer value by keyboard and avoid writting the previous two line is:
side=int(input("Enter the side measurement of the square:")
)
We proceed to calculate the surface area after entering the data via keyboard and converting it to an integer:
surface=side*side
To display a message on the screen we have the print function that we pass as a parameter a string of characters to be displayed that must be enclosed in single or double quotes:
print("The area of the square is")

To display the content of the surface variable we must not enclose it in quote when we call the print function:
print(surface)

SOME CONSIDERATIONS.
Python is case sensitive, it is not the same as calling the input function with the syntax: input.

Variable names are also case sensitive. They are two variables if in one place we start the variable "surface" and then make references to "Surface".

Variable names cannot contain blanks, special characters, and begin with a number.
All the code must be written in the same column, it will be incorrect if we write:
side=input("Enter the side measurement of the square:")
  side=int(side)
   surface=side*side
   print("The area of the square is")
   print(surface)
   There are more restrictions that we will learn as the course progresses.

4- syntactic and logical errors.

We will modify the problem from the previous concept and purposely add a series of typographical errors. These types of errors are always detected by the python interpreter before executing the program. 

To typographical errors, such as indicating the incorrect name of the function, incorrect variable names, missing parentheses, misspelled keywords, etc.
We call them SYNTACTIC errors.

A program cannot be executed completely without correcting absolutely all syntax errors.
There is another type of error called LOGICAL ERRORS. These types of errors in large programs(thousands of lines) are more difficult to locate. For example, a program that allows billing but the data output through the printer is incorrect.

Problem.
FIND THE SURFACE AREA OF A SQUARE KNOWING THE VALUE OF ONE SIDE.

correctly coded program:
side=int(input("Enter the side measurement of the square:"))
surface=side*side
print("The area of the square is")
print(surface)

program with a syntax error:

side=int(input("Enter the side measurement of the square:"))
surface=side*side
print("The area of the square is")
print(Surface)

It is incorrect to print a variable that has never been initialized: Surface (we must respect how we started it in the previous lines)

Program with logical error:
side=int(input("Enter the sie measurement of the square:"))
surface=side*side*side
print("The area of the square is")
print(surface)

As we can see, if we run the program it does not present any syntactic error, but after entering the value of the side of the square(for example the value 10) we obtain an incorrect value as a result(it prints 1000), this is because we incorrec
tly defined the formula for calculate the surface area of the square:
surface=side*side*side

5- sequential programming structure.

When only operations, inputs and outputs participate in a problem, it is called a sequential structure.
Diagrammed and pre-coded problems use only sequential structures.
Programming requires continuous practice of diagramming and coding problems:

Problem:
LOAD TWO INTEGERS BY KEYBOARD AND PRINT THEIR SUM AND PRODUCT.

We have two inputs num 1 and num 2, two operations: the sum and the product of the entered values and two outputs, which are the results of the sum and product of the entered values. In the print symbol we can indicate one or more outputs, this is at the discretion of the programmer, the same for indicating keyboard inputs.
 
num1=int(input("enter first value:"))
num2=int(input("enter second value:"))
sum=num1+num2
product=num1*num2
print("The sum of the two values is")
print(sum)
print("The product of the two values is")
print(product)

PROBLEM:
LOAD THE PRICE OF A PRODUCT AND THE QUANTITY TO CARRY. SHOW HOW MUCH SHOULD BE PAID(AN INTEGER VALUE IS ENTERED IN THE PRODUCT PRICE)

We have two inputs: price and quantity, an operation to calculate the amount and an output.

price=int(input("Enter the price of the product:"))
quantity=int(input("Enter the quantity of products to carry:"))
amount=price*quantity
print("The amount to pay is")
print(amount)

Proposed problems:
LOAD THE SIDE OF A SQUARE, DISPLAY ITS PERIMETER ON THE SCREEN(THE PERIMETER OF A SQUARE IS CALCULATED BY MULTIPLYING THE VALUE OF THE SIDE BY FOUR)

WRITE A PROGRAM IN WHICH FOUR NUMBERS ARE ENTERED, CALCULATE AND REPORT THE SUM OF THE FIRST TWO AND THE PRODUCT OF THE THIRD AND FOURTH.

MAKE A PROGRAM THAT READS FOUR NUMERICAL VALUES AND REPORTS THEIR SUM AND AVERAGE.

CALCULATE THE MONTHLY SALARY OF AN OPERATOR KNOWING THE NUMBER OF HOURS WORKED AND THE VALUE PER HOUR.


6- Simple and compound conditional structures.

Not all problems can be solved using sequential structures. When a decision has to be made, conditional structures appear.
In our daily lives we are presented with situations where we must decide.
Do i choose career A or career B?
Should i wear these pants?
To go to work, do I choose path A or path B?
When taking a degree, do i choose the morning, afternoon or night shift?
It is common for sequential and conditioal structures to be combined in a problem.

Simple conditional structure.
When the choice is presented we have the option to do an activity or not do anything.
Graphic representation of a conditional structure to be used in a flowchart.


We can observer: the rhombus represents the condition. There are two options that can be taken. If the conditions is true, the true path is followed, that is, the one on the right; if the condition is false, the left path is followed where there is no activity.
It is a simple conditional structure because on the true path there are activities and on false path there are no activities.
On the true path there can be several operations, inputs and outputs, we will even see that there can be other conditional structures:
 
Problem:
ENTER A PERSON´S SALARY, IF IT EXCEEDS 3000 DOLLARS, DISPLAY A MESSAGE ON THE SCREEN INDICATING THAT THEY MUST PAY TAXES.

We can observe the following: The salary is always charged, but if the salary we enter exceeds 3000 dollars, the message this person must pay taxes will be displayed on the screen. If the person earns 3000 or less, nothing appears on the screen.

Program exercise 9.py

salary=int(input("Enter your salary:"))
if salary>3000:
    print("This person must pay taxes")

The keyword if indicates that we are in the presence of a conditional structure; Next we set the condition and end the line with the character two points.
The activity inside the if is generally indented to 4 spaces.
Everything that is int the true branch of the if must be arranged 4 spaces to the right.
Indentation is a mandatory feature of the python language for encoding conditional structures, in this way the python interpreter can identify where the statements contained in the true branch of the if end.

Runnig the program and entering a salary greater than 3000. We can see how the message This person must pay taxes appears on the screenm, since the if the if condition is true:

If we execute it again and enter a value equal to or less than 3000 we can see that the statement found in the true branch of the if is not executed:

Composite conditional structure.
When the choice is presented we have the option of doing one activity or another. That is, we have activities for the true and false of the condition. The most important thing to keep in mind is that the activities of the or false branches are carried out, the activities of both branches are never carried out.

In a compound conditional structure we have activities on both the true branch and the false branch.

Problem:
CREATE A PROGRAM THAT ASKS YOU TO ENTER TWO DIFFERENT NUMBERS AND DISPLAYS THE LARGEST OF THEM ON THE SCREEN.

The entry of num1 and num2 is made by keyboard. To know which variable has a greater value, we ask if the content of num 1 is greater(>) than the content of num2. if the answer is true, we go through the branch on the right and print num 1. If the conditions is false, we go through the left branch(False) and print num2.
As we can see, num1 and num2 are never printed simultaneously.

We are in presence of a COMPOUND CONDITIONAL STRUCTURE since we have activities through the branch of the true and false.

Program: exercise10.py

num1=int(input("Enter first value:")
num2=int(input("Enter second value:"))
print("The largest value is")
if num1>num2:
    print(num1)
else:
    print(num2)

Let´s compare the flowchart and coding and notice that first block after the if represents the true branch and the second block after the else keyword represents the false branch.
We execute the program, if there were syntactic errors, we correct and load two values, such as:
Enter the first value: 10 
Enter the second value:4
The largest vale is 
10

If we enter the values 10 and 4, the if condition returns true and executes the first block.
A program is controlled and corrected by testing all its possible results.
Let´s run the program again and enter:

Enter the first value:10
Enter the second value: 54
The largest value is 
54

When we correct all the syntactic and logical errors in a program, our task has been completed and we can deliver it to the USER who requested it from us.

Operators.
Only variables, constant values and relational operators should be provided in a condition.
RELATIONAL OPERATORS:
== equality
!= inequality
< minor
<= less than or equal
> major 
>= greater than or equal

MATHEMATICAL OPERATORS
+ sum
- subtraccion
* multiplication
/ float division
// division of integers
% remainder of a division
** exponentiation

It must taken into account that when setting a condition we must select which relational operator adapts to the question.

examples:

A number is entered, multiply it by 10 if it is different from 0.(!=)
Two numbers are entered, display a warning if they are the same. (==)

The problems that can arise are infite and the correct choice of the operator is only achieved with intensive practice in problem solving.

Proposed problems.
CREATE A PROGRAM THAT REQUEST THE KEYBOARD LOADING OF TWO NUMBERS, IF THE FIRST IS GREATER THAN THE SECOND, REPORT THEIR SUM AND DIFFERENCE, OTHERWISE REPORT THE PRODUCT AND DIVISION OF THE FIRST WITH RESPECT TO THE SECOND.

THREE GRADES ARE ENTERED FOR A STUDENT, IF THE AVERAGE IS GREATER THAN OR EQUAL TO SEVEN, A PROMOTED MESSAGE WILL BE DISPLAYED.

A POSITEVE NUMBER OF ONE OR TWO DIGITS 1..99 IS ENTERED BY KEYBOARD AND A MESSAGE IS DISPLAYED INDICATING WHETER THE NUMBER HAS ONE OR TWO DIGITS.
(KEEP IN MIND WHAT CONDITION MUST BE MET TO HAVE TWO DIGITS IN AN INTEGER)





