pythonNow book.
1- python tutorial objetives.
This course is designed to be taken by a person who does not know anything about programming and uses the python language as the first language to approach computer programming.

The fundamental objective of this tutorial is to allow the student to solve problems of different kinds(mathematical, administrative, games, accounting, etc.) using the computer as a tool.

It must be taken into account that to become a programmer you must travel a long path where each topic is fundamental for future concepts. It is important not to leave topics without understanding and relating.

Programming, unlike other subjects that you have studied such as history, requires a methodical and orderly study( in history you can study the middle ages without having great knowledge of the ancient age, this does not happen with learning programming).

Programming is a new activity for the student, there is no similar subject in primary and secondary studies.

It is good to be patient when problems are not completely resolved, but it is fundamentally important to dedicate time to individual analysis of the problems.

WHAT IS A PROGRAM?
Program: set of instructions that a computer understands to carry out an activity. Every program has a well-defined objetive: a word processor is a program that allows you to load, modify and print texts, a chess program allows you to play chess against the computer or another human opponent.
The fundamental activity of the programmer is to solve problems using the computer as a fundamental tool.

To solve a problem, an algorithm must be proposed.

ALGORITHM: These are steps to follow to solve problem.

FLOWCHART: A flowchart is the graphical representation of an algorithm.

The main graphic symbols to use for creating flowcharts are:

STATEMENT OF A PROBLEM USING A FLOW CHART.

To create a flow chart we must be very clear about the problem to be solved.
Example: CALCULATE THE MONTHLY SALARY OF AN OPERATOR KNOWING THE NUMBER OF HOURS WORKED AND THE PAYMENT PER HOUR.

we can identify:

Known data:
Hours worked in the month.
hourly.

Process:
Calculation of salary by multipliying the number of hours by the hourly payment.

Resulting information:
Montlhy salary.

If we do an analysis, every problem is made up of:
Known data: Data that is available when posing the problem.
Process: Operations to be performed with known data.
Resulting information: It is information that is obtained from the process and allows us to solve problem.

This way of expressing a problem by identifying its known data, processes and resulting information can become cumbersome for complex problems where there are many known data and processes. That is why it is much more effective to represent the steps to solve the problem using a flow chart.

It is much easier to understand a graph than a text.
The flowchart clearly identifies the input data, operations and output data.
In the example we have two input data: hoursWorked and CostHour, we represent the inputs with a parallelogram and we make a parallelogram for each input data.
The operation is represented with a rectangle, we must make a rectangle for each operation.
At the exit we represent it with the broken leaf.

The flow chart gives us an idea of the order of executation of activities over time. First we load the input data, then we do the necessary operations and finally we display the results.

VARIABLE: It is deposit where there is a value. It consists of a name and belongs to a data type.

For the example given, the variable hoursWorked stores the number of hours worked by the operator. The variable hourValue stores the price of an hour of work. The salary variable stores the salary to be paid to the operator.
In the example we have three variables.

VARIABLES TYPES.

A variable can store:

integer values(100, 260, etc.)
Real values (1.24, 2.90, 5.00, etc.)

Choosing a variable name:
We must choose representative variable names. In the example, the name HoursWorked is clear enough to give us a complete idea of its content. We can give it other good names.
Others are not so representative for example htr. Possibly we are solving a problem, this name reminds us that we store the hours worked by the operator, but when time passes and we read the diagram we will probably not remenber or understand what hTr means.

3- Flowchart coding in python.

The flow chart is our tool to be able to propose a solution to our to our problem.

In order to test our proposed solution to a problem using a flowchart, we must then code it in python.

We will start with very simple problems and preceed to implement your flowchart and then your coding.

Problem.
FIND THE SURFACE AREA OF A SQUARE KNOWING THE VALUE OF ONE SIDE.

From the main window of the python environment we proceed to create our second file exercise2.py, we save it as we saw in the previous concept and we code in python the following solution to the flowchart:

side=input("Enter the side measurement of the square:")
side=int(side)
surface=side*side
print("The area of the square is")
print(surface)

If we execute the program run ->run module, we can verify that keyboard input of the measurement of the side of the square is requested and then it shows us the surface depending on the value enteren:

To enter data by keyboard and display a message, the input function is used. This function returns all characters written by the program operator:
side=input("Enter the side measurement of the square:")
The side variable saves all the characters entered but not in numerical format, for this we must call the int function.

side=int(side)
Now the value entered by the operator is saved again in the side variable but in integer format that makes it possible to do mathematical operations with it.

A simplified format to enter an integer value by keyboard and avoid writting the previous two line is:
side=int(input("Enter the side measurement of the square:")
)
We proceed to calculate the surface area after entering the data via keyboard and converting it to an integer:
surface=side*side
To display a message on the screen we have the print function that we pass as a parameter a string of characters to be displayed that must be enclosed in single or double quotes:
print("The area of the square is")

To display the content of the surface variable we must not enclose it in quote when we call the print function:
print(surface)

SOME CONSIDERATIONS.
Python is case sensitive, it is not the same as calling the input function with the syntax: input.

Variable names are also case sensitive. They are two variables if in one place we start the variable "surface" and then make references to "Surface".

Variable names cannot contain blanks, special characters, and begin with a number.
All the code must be written in the same column, it will be incorrect if we write:
side=input("Enter the side measurement of the square:")
  side=int(side)
   surface=side*side
   print("The area of the square is")
   print(surface)
   There are more restrictions that we will learn as the course progresses.

4- syntactic and logical errors.

We will modify the problem from the previous concept and purposely add a series of typographical errors. These types of errors are always detected by the python interpreter before executing the program. 

To typographical errors, such as indicating the incorrect name of the function, incorrect variable names, missing parentheses, misspelled keywords, etc.
We call them SYNTACTIC errors.

A program cannot be executed completely without correcting absolutely all syntax errors.
There is another type of error called LOGICAL ERRORS. These types of errors in large programs(thousands of lines) are more difficult to locate. For example, a program that allows billing but the data output through the printer is incorrect.

Problem.
FIND THE SURFACE AREA OF A SQUARE KNOWING THE VALUE OF ONE SIDE.

correctly coded program:
side=int(input("Enter the side measurement of the square:"))
surface=side*side
print("The area of the square is")
print(surface)

program with a syntax error:

side=int(input("Enter the side measurement of the square:"))
surface=side*side
print("The area of the square is")
print(Surface)

It is incorrect to print a variable that has never been initialized: Surface (we must respect how we started it in the previous lines)

Program with logical error:
side=int(input("Enter the sie measurement of the square:"))
surface=side*side*side
print("The area of the square is")
print(surface)

As we can see, if we run the program it does not present any syntactic error, but after entering the value of the side of the square(for example the value 10) we obtain an incorrect value as a result(it prints 1000), this is because we incorrec
tly defined the formula for calculate the surface area of the square:
surface=side*side*side

5- sequential programming structure.

When only operations, inputs and outputs participate in a problem, it is called a sequential structure.
Diagrammed and pre-coded problems use only sequential structures.
Programming requires continuous practice of diagramming and coding problems:

Problem:
LOAD TWO INTEGERS BY KEYBOARD AND PRINT THEIR SUM AND PRODUCT.

We have two inputs num 1 and num 2, two operations: the sum and the product of the entered values and two outputs, which are the results of the sum and product of the entered values. In the print symbol we can indicate one or more outputs, this is at the discretion of the programmer, the same for indicating keyboard inputs.
 
num1=int(input("enter first value:"))
num2=int(input("enter second value:"))
sum=num1+num2
product=num1*num2
print("The sum of the two values is")
print(sum)
print("The product of the two values is")
print(product)

PROBLEM:
LOAD THE PRICE OF A PRODUCT AND THE QUANTITY TO CARRY. SHOW HOW MUCH SHOULD BE PAID(AN INTEGER VALUE IS ENTERED IN THE PRODUCT PRICE)

We have two inputs: price and quantity, an operation to calculate the amount and an output.

price=int(input("Enter the price of the product:"))
quantity=int(input("Enter the quantity of products to carry:"))
amount=price*quantity
print("The amount to pay is")
print(amount)

Proposed problems:
LOAD THE SIDE OF A SQUARE, DISPLAY ITS PERIMETER ON THE SCREEN(THE PERIMETER OF A SQUARE IS CALCULATED BY MULTIPLYING THE VALUE OF THE SIDE BY FOUR)

WRITE A PROGRAM IN WHICH FOUR NUMBERS ARE ENTERED, CALCULATE AND REPORT THE SUM OF THE FIRST TWO AND THE PRODUCT OF THE THIRD AND FOURTH.

MAKE A PROGRAM THAT READS FOUR NUMERICAL VALUES AND REPORTS THEIR SUM AND AVERAGE.

CALCULATE THE MONTHLY SALARY OF AN OPERATOR KNOWING THE NUMBER OF HOURS WORKED AND THE VALUE PER HOUR.


6- Simple and compound conditional structures.

Not all problems can be solved using sequential structures. When a decision has to be made, conditional structures appear.
In our daily lives we are presented with situations where we must decide.
Do i choose career A or career B?
Should i wear these pants?
To go to work, do I choose path A or path B?
When taking a degree, do i choose the morning, afternoon or night shift?
It is common for sequential and conditioal structures to be combined in a problem.

Simple conditional structure.
When the choice is presented we have the option to do an activity or not do anything.
Graphic representation of a conditional structure to be used in a flowchart.


We can observer: the rhombus represents the condition. There are two options that can be taken. If the conditions is true, the true path is followed, that is, the one on the right; if the condition is false, the left path is followed where there is no activity.
It is a simple conditional structure because on the true path there are activities and on false path there are no activities.
On the true path there can be several operations, inputs and outputs, we will even see that there can be other conditional structures:
 
Problem:
ENTER A PERSON´S SALARY, IF IT EXCEEDS 3000 DOLLARS, DISPLAY A MESSAGE ON THE SCREEN INDICATING THAT THEY MUST PAY TAXES.

We can observe the following: The salary is always charged, but if the salary we enter exceeds 3000 dollars, the message this person must pay taxes will be displayed on the screen. If the person earns 3000 or less, nothing appears on the screen.

Program exercise 9.py

salary=int(input("Enter your salary:"))
if salary>3000:
    print("This person must pay taxes")

The keyword if indicates that we are in the presence of a conditional structure; Next we set the condition and end the line with the character two points.
The activity inside the if is generally indented to 4 spaces.
Everything that is int the true branch of the if must be arranged 4 spaces to the right.
Indentation is a mandatory feature of the python language for encoding conditional structures, in this way the python interpreter can identify where the statements contained in the true branch of the if end.

Runnig the program and entering a salary greater than 3000. We can see how the message This person must pay taxes appears on the screenm, since the if the if condition is true:

If we execute it again and enter a value equal to or less than 3000 we can see that the statement found in the true branch of the if is not executed:

Composite conditional structure.
When the choice is presented we have the option of doing one activity or another. That is, we have activities for the true and false of the condition. The most important thing to keep in mind is that the activities of the or false branches are carried out, the activities of both branches are never carried out.

In a compound conditional structure we have activities on both the true branch and the false branch.

Problem:
CREATE A PROGRAM THAT ASKS YOU TO ENTER TWO DIFFERENT NUMBERS AND DISPLAYS THE LARGEST OF THEM ON THE SCREEN.

The entry of num1 and num2 is made by keyboard. To know which variable has a greater value, we ask if the content of num 1 is greater(>) than the content of num2. if the answer is true, we go through the branch on the right and print num 1. If the conditions is false, we go through the left branch(False) and print num2.
As we can see, num1 and num2 are never printed simultaneously.

We are in presence of a COMPOUND CONDITIONAL STRUCTURE since we have activities through the branch of the true and false.

Program: exercise10.py

num1=int(input("Enter first value:")
num2=int(input("Enter second value:"))
print("The largest value is")
if num1>num2:
    print(num1)
else:
    print(num2)

Let´s compare the flowchart and coding and notice that first block after the if represents the true branch and the second block after the else keyword represents the false branch.
We execute the program, if there were syntactic errors, we correct and load two values, such as:
Enter the first value: 10 
Enter the second value:4
The largest vale is 
10

If we enter the values 10 and 4, the if condition returns true and executes the first block.
A program is controlled and corrected by testing all its possible results.
Let´s run the program again and enter:

Enter the first value:10
Enter the second value: 54
The largest value is 
54

When we correct all the syntactic and logical errors in a program, our task has been completed and we can deliver it to the USER who requested it from us.

Operators.
Only variables, constant values and relational operators should be provided in a condition.
RELATIONAL OPERATORS:
== equality
!= inequality
< minor
<= less than or equal
> major 
>= greater than or equal

MATHEMATICAL OPERATORS
+ sum
- subtraccion
* multiplication
/ float division
// division of integers
% remainder of a division
** exponentiation

It must taken into account that when setting a condition we must select which relational operator adapts to the question.

examples:

A number is entered, multiply it by 10 if it is different from 0.(!=)
Two numbers are entered, display a warning if they are the same. (==)

The problems that can arise are infite and the correct choice of the operator is only achieved with intensive practice in problem solving.

Proposed problems.
CREATE A PROGRAM THAT REQUEST THE KEYBOARD LOADING OF TWO NUMBERS, IF THE FIRST IS GREATER THAN THE SECOND, REPORT THEIR SUM AND DIFFERENCE, OTHERWISE REPORT THE PRODUCT AND DIVISION OF THE FIRST WITH RESPECT TO THE SECOND.

THREE GRADES ARE ENTERED FOR A STUDENT, IF THE AVERAGE IS GREATER THAN OR EQUAL TO SEVEN, A PROMOTED MESSAGE WILL BE DISPLAYED.

A POSITEVE NUMBER OF ONE OR TWO DIGITS 1..99 IS ENTERED BY KEYBOARD AND A MESSAGE IS DISPLAYED INDICATING WHETER THE NUMBER HAS ONE OR TWO DIGITS.
(KEEP IN MIND WHAT CONDITION MUST BE MET TO HAVE TWO DIGITS IN AN INTEGER)

7-Nestead conditional structures.

We are in the presence of a nested conditional structure when there is another conditional structure on the true or false branch of a conditional structure.

The flowchart presented contains two conditional structures. The main one is a compound conditional structure and the second is a simple conditional structure and is contained by the false branch of the first structure.
Even more complex nested conditional structures are common.

Problem.
CREATE A PROGRAM THAT ASKS FOR THREE GRADES FROM A STUDENT BY KEYBOARD, CALCULATES THE AVERAGE AND PRINTS ONE OF THESE MESSAGES:
IF THE AVERAGE IS>=7, SHOW "PROMOTED"
IF THE AVERAGE IS>=4, AND <7 SHOW "FAIR"
IF THE AVERAGE IS <4 SHOW "FAILED"

Let´s analyze the following diagram. Three values are entered by keyboard that represent a student´s grades, the average is obtained by adding the three values and dividing said result by 3 (Keep in mind that the result is a real value since the /  operator is used).

First we ask if the average is greater than or equal to 7, if so it goes through the true branch of the conditional structure we show a message that indicates "Promoted" (with quotes we indicate a text that must be printed on the screen).
If the condition gives us false, another 
conditional structure appears through the false branch, because we still have to find out if the student´s average is greater than or equal to four or less than four.
We are in the presence of two compound conditional structures.

program: exercise14.py
note1=int(input("Enter first note:"))
note2=int(input("Enter second note:"))
note3=int(input("Enter third note:"))
avg=(note1+note2+note3)/3
if avg>=7:
    print("Promoted")
else:

    if avg>=4:
        print("regular")

    else:
        print("failed")

Let´s code and run this program. When you run the program, you must request the loading of three notes via keyboard and show us a message based on their average.

We can observe the coding of the nested if by the else of the first if.
As we see, we must indent the true and false branches of the nested if to 8 characters.

Proposed problems.
THREE DIFFERENT NUMBERS ARE LOADED BY KEYBOARD. SHOW THE LARGEST OF THEM ON THE SCREEN.

AN INTEGER VALUE IS ENTERED BY KEYBOARD, DISPLAY A LEGEND THAT INDICATES WHETHER THE NUMBER IS POSITIVE, NEGATIVE OR NULL(THAT IS, ZERO)

CREATE A PROGRAM THAT ALLOWS LOADING A POSITIVE INTEGER OF UP TO THREE DIGITS AND DISPLAY A MESSAGE INDICATING WHETHER IT HAS 1,2,3 DIGITS. SHOW AN ERROR MESSAGE IF THE NUMBER OF FIGURES IS GREATER.

A JOB APPLICANT TAKES A TRAINING TEST, THE FOLLOWING INFORMATION WAS OBTAINED: TOTAL NUMBER OF QUESTIONS ASKED AND THE NUMBER OF QUESTIONS ANSWERED CORRECTLY. IT IS REQUESTED TO CREATE A PROGRAM THAT ENTERS THE TWO DATA BY KEYBOARD AND REPORTS ITS LEVEL ACCORDING TO THE PERCENTAGE OF CORRECT ANSWERS THAT SHE HAS OBTAINED, AND KNOWING THAT:
MAXIMUM LEVEL: PERCENTAGE>=90%.
MEDIUM LEVEL: PERCENTAGE >=75% AND <90%.
REGULAR LEVEL: PERCENTAGE >=50% AND <75%.
OUT OF LEVEL: PERCENTAGE <50%.

8- Composite conditions with logical operators.

So far we have seen the operators:
relational(>, <, >=, <=, ==, !=)
math (+,-, *, /, //, **,%)
but we are missing other essential operators:
logical (and and or)

Operator and

Translated it is read as Y. If condition 1 is true AND condition 2 is true then execute the true branch.
When we link two conditions with the and operator, both conditions must be true for the result of the compound condition to be TRUE  and continue throgh the true branch of the conditional structure.
 
The use of logical operators allows in many cases to propose shorter and more understandable algorithms.

Problem:
CREATE A PROGRAM THAT READS THREE DIFFERENT INTEGERS FROM THE KEYBOARD AND SHOWS US THE LARGEST.

This exercise can be solved without logical operators, but using them allows us to make the solution simpler.
The first conditional structure is a composite conditional structure with a composite condition.
We can read it in the following way:
If the content of variable num1 is greater than the content of variable num2 AND if the content of variable num1 is greater than the content of variable num3 then the composite condition is True.
If one of the simple conditions returns false, the composite condition returns False and continues through the false branch.
That is, the content of num1 will be displayed if and only if num1 >num2 and num3.
If the condition is False, we analyze the content of num2 and num3 to see which has a greater value.
In this second conditional structure, logical operators are not required as there is a simple condition.
program exercise19.py

num1=int(input("Enter first value:"))
num2=int(input("Enter second value:"))
num3=int(input("Enter third value:"))
print("The largest of the three values is:")
print("The largest of the three value is")
if num1>num2 and num1>num3:
    print(num1)
else:
     if num2>num3:
         print(num2)
     else:
         print(num3)


Operator or
Translated it is read as "O". If condition 1 is True or condition 2 is True, then execute the True branch.
When we link two or more conditions with the "or" operator, one of the two conditions being True is enough for the result of the compound condition to be True.

Problem:
A DATE (DAY, MONTH, AND YEAR) IS LOADED BY KEYBOARD. SHOW A MESSAGE IF IT CORRESPONDS TO THE FIRST QUARTER OF THE YEAR(JANUARY, FEBRUARY OR MARCH) LOAD THE NUMERICAL VALUE OF THE DAY, MONTH AND YEAR BY KEYBOARD.
EXAMPLE: DAY:10 MONTH:2 YEAR:2018

Loading a date is done in parts, we enter the variables day, month and year.
We show the message corresponds to the first quarter in case the month entered by keyboard is equal to 1,2 or 3.
The variables day and year do not participate in the condition.

program exercise20.py
day=int(input("Enter day number:"))
month=int(input("Enter month number:"))
year=int(input("Enter year number:"))
if month==1 or month==2 or month==3:
    print("Corresponds to the first quarter")

Proposed problems.
CREATE A PROGRAM THAT ASKS YOU TO LOAD ANY DATE, THEN VERIFY IF SAID DATE CORRESPONDS TO CHRISTMAS.

THREE NUMBERS ARE ENTERED BY KEYBOARD, IF ALL THE VALUES ENTERED ARE LESS THAN 10, PRINT ON THE SCREEN THE LEGEND ALL NUMBERS ARE LESS THAN TEN.

THREE NUMBERS ARE ENTERED BY KEYBOARD, IF AT LEAST ONE OF THE ENTERED VALUES IS LESS THAN 10, PRINT ON THE SCREEN THE LEGEND SOME OF THE NUMBERS ARE LESS THAN TEN.

THREE VALUES ARE ENTERED BY KEYBOARD, IF ALL ARE EQUAL, THE SUM OF THE FIRST AND THE SECOND IS PRINTED AND THIS RESULT IS MULTIPLIED BY THE THIRD.

WRITE A PROGRAM THAT ASKS YOU TO ENTER THE COORDINATE OF A POINT IN THE PLANE, THAT IS, TWO INTEGER VALUES X AND Y NON-ZERO.
THEN PRINT ON THE SCREEN IN WHICH QUADRANT SAID POINT IS LOCATED 1ST QUADRANT IF X >0 AND Y>0, 2ND QUADRANT: X<0 AND Y >0, ETC.

AN OPERATOR´S SALARY AND YEARS OF SENORITY ARE KNOWN. IT IS REQUESTED TO CREATE A PROGRAM THAT READS THE INPUT DATA AND REPORTS:
A) IF SALARY IS LESS THAN 500 AND THEIR SENIORITY IS EQUAL TO OR GREATER THAN 10 YEARS, GIVE THEM A 20% INCREASE, SHOW THE SALARY TO BE PAID.
B) IF THE SALARY IS LESS THAN 500 BUT HIS SENIORITY IS LESS THAN 10 YEARS, GIVE HIM A 5% INCREASE.
C) IF THE SALARY IS GREATER THAN OR EQUAL TO 500, SHOW THE SALARY ON THE SCREEN WITHOUT CHANGES.

WRITE A PROGRAM IN WHICH: GIVEN A LIST OF THREE DIFFERENT NUMERICAL VALUES, THEIR RANGE OF VARIATION IS CALCULATED AND REPORTED IT MUST SHOW THE LARGEST AND SMALLEST OF THEM.

9- Repetitive while structure.

Until now we have used sequential and conditional structures. There is another type of structures as important as the previous ones, which are repetitive structures. 
A repeating structure allows an instruction or set of instructions to be executed multiple times.

A repetitive structure is characterized by:
The sentence or sentences that are repeated.
The test or condition test before each repetition, which will motivate whether or not the instructions are repeated.

Repetitive while structure.
We should not confuse the graphical representation of the repetitive while structure with the conditional if structure.
How it works: First, the condition is verified; if it is true, the operations indicated by the True branch are executed.
We graph the true branch at the bottom of the condition. A  line at the end of the repeat block connects it to the top of the repeating structure.
If the condition is False, it continues through the False branch and leaves the repetitive structure to continue with the execution of the algorithm.

The block repeats as long as the condition is True.

Important: If the condition always returns true, we are in the presence of an infinite repetitive cycle. This situation is a logical programming error, the program will never end.

Problem 1:
CREATE A PROGRAM THAT PRINTS THE NUMBERS FROM 1 TO 100 ON THE SCREEN.

Without knowing the repetitive structures we can solve the problem using a sequential structure. We initialize a variable with the value 1, then print the variable, increment the variable again, and so on.

If we continue with the diagram we would see that is almost endless.
Using a sequential structure to solve this problem produces a flowchart and a very long python program.
Now let´s look at the solution using a repetitive while structure:

It is very important to analyze this diagram:
The first operation initializes the variable x to 1, then the repetitive while structure begins and we set the following condition x<=100, it is read while the variable.

When the condition is executed, it returns True because the content of x (1) is less than or equal to 100. When the condition is true, the block of instructions that contains the while structure is executed. The instruction block contains one output and one operation.
The content of x is printed, and then the variable x is incremented by one.

The operation x=x+1 is read as the content of x plus 1 is stored in the variable x. That is, if x contains 1, after executing this operation, a 2 will be stored in x.
At the end of the block of instructions containing the repetitive structure, the condition of the repetitive structures is checked again and the process explained above is repeated.

As long as the condition returns true, the instruction block is executed; when the codition verification returns false, the repetitive structure is exited and the algorithm continues, in this case the program ends.

The most difficult thing is definig the condition of the while structure and which block of statements are going to be repeated. Note that if, for example, we set the condition x>=100 if executes the block of instructions that we wanted to repeat 100 times.

There is no recipe to define a condition of a repetitive structure, but it is achieved with continous practice solving problems.

Once the diagram has been created, we must verify if it is a valid solution to the problem in this case, the numbers from 1 to 100 must be printed on the screen, to do this we can track the flow of the diagram and the values that the variables take throughout the execution:
x
1
2
3
4
.
. 
100
101 When x is 101 the repeating structure condition returns false, in this cace the diagram ends.

Important: We can see that the repeating block may not be executed at all if the condition returns false the first time.
The variable x must be initialized with some value before the operation x=x+1 is executed. If it is not initialized, a compilation error appears.

program: exercise28.py

x=1 
while x<=100
    print(x)
    x=x+1

Let us remember that a problem will not be 100% solved if we do not code the program in our case in python that shows the desired results.

It is important to note that followed by the while keyword we have the condition and finally the colon. All code contained in the repeating structure must be indented usually four spaces.

Let´s try some modifications of this program and see what changes should be made to:

PRINT THE NUMBERS FROM 1 TO 500.
PRINT THE NUMBERS FROM 50 TO 100.
PRINT THE NUMBERS FR0M -50 TO 0.
PRINT THE NUMBERS FROM 2 TO 100 BUT 2 AT A TIME 2,4,6,8... 100.

Problem 2:
CODE A PROGRAM THAT REQUEST THE LOADING OF A POSITIVE VALUE AND SHOWS US FROM 1 TO THE ENTERED VALUE ONE BY ONE. EXAMPLE: IF WE ENTER 30, THE NUMBERS 1 TO 30 MUST BE DISPLAYED ON THE SCREEN.

It is of fundamental importance to analyze the flow charts and the subsequent coding in python of the following problems; in several problems other situations not seen in the previous exercise are presented.

We can see that the variable n is entered by keyboard. The operator can load any value.
If the user loads 10 , the repetitive block will be executed 10 times, since the condition is while x<=n, that is, as long as x is less than or equal to 10; since x starts at one and is incremented by one each time the repeating block is executed.

We can perform the diagram test by giving values to the variables; for example, if we enter 5 vthe tracking is as follows:
n x
5 1(The content of x is printed)
2
3
4
5
6 (Exits while because 6 is not less than or equal to 5)

program: exercise29.py
n=int(input("Enter the final value:"))

x=1
while x<=n:
    print(x)
    x=x+1

Variable names n and x can be words or letters (as in this case)

The varible x is called counter. A counter is a special type of variable that is incremented or decrement with constant values during program execution.

The x counter tells us at each moment the number of values printed on the screen.

Problem 3:
DEVELOP A PROGRAM THAT ALLOWS THE LOADING OF 10 VALUES PER KEYBOARD AND SUBSEQUENTLY SHOWS US THE SUM OF THE ENTERED VALUES AND THEIR AVERAGE.

In this problem, similar to the previous ones, we have a counter called x that seves to count  the number of turns that the while must repeat.

The concept of accumulator also appears (an accumulator is a special type of variable that increases or decreases with variable values during the execution of the program)

We have given the name sum to our accumulator. Each cycle that the repetitive structure is repeated, the sum variable is incremented with the content entered in the value variable.

The diagram test is done by giving values to the variables:

sum x average value
(Before entering the repetitive structure these are the values)
5 5 1
16 21 2
7 28 3

This is follow-up of the proposed diagram. The numbers that the value variable takes will depend on what figures the operator loads during the execution of the program.

The average is calculated when leaving the repetitive structure(that is, we first add the 10 values entered and then divide them by 10)

It must be taken into account that when the first value is loaded into the value variable(in this example 5), when the second value(16) is loaded, the previous value 5 is lost, the need to store the sum values in the variable. entered.
program: exercise30.py

x=1
sum=0
while x<=10:
    value=int(input("Enter a value:"))
     sum=sum+value
     x=x+1
average=sum/10
print("The sum of the 10 value is")
print(sum)
print("The average is")
print(average)

The result of the average is a real value, that is, with a comma. If we want the result of the division to onyly return the integer part of the average, we must use the operator // operator:
average=sum//10

The python interpreter knows that the average is calculated at the end of the while since it is encoded in column 1. The threes statements contained in the while are indented.

Problem 4:
A PLANT THAT MANUFACTURES IRON PROFILES HAS A BATCH OF N PIECES.
CREATE A PROGRAM THAT ASKS YOU TO ENTER THE NUMBER OF PIECES TO BE PROCESSED BY KEYBOARD AND THEN ENTER THE LENGTH OF EACH PROFILE; KNOWING THAT THE PIECE WHOSE LENGTH IS BETWEEN 1.20 AND 1.30 ARE SUITABLE. PRINT ON THE SCREEN THE NUMBER OF SUITABLE PIECES IN THE LOT.

We can observe that within a repetitive structure there may be conditional structures (there may even be other repetitive structures that we will see later)

In this problem you must initially load the number of pieces to be entered(n), then n values of piece lengths are loaded. Every time we enter a piece length(length) we verify if it is a correct measurement the length must be between 1.20 and 1.30 for it to be correct, if it is correct we count it we increase the quantity variable by 1.

We initialize the quantity counter to zero because initially no part length has been loaded.
When we leave the repetitive structure because n lengths of pieces have been loaded, we display the quantity counter on the screen which represents the number of suitable pieces.

in this problem we have two counters:
x (Counts the number of pieces loaded so far)
quantity (Counts suitable iron profiles)

program: exercise31.py

quantity=0
x=1
n=int(input("How many pieces will you load:"))
while x<=n:
    length=float(input("Enter the measurement of the piece:"))
    if length>=1.2 and length<=1.3:
        quantity=quantity+1
x=x+1
print("The number of suitable pieces are: ")
print(quantity)

Let´s look at some new things:
When we want to load a value with decimals from the keyboard, we must use the float function instead of int:
length=float(input("Enter the measurement of the piece:"))

Proposed problems
The fundamental part has arrived, which is the moment where one individually develops an algorithm for solving problems.
the time to dedicate to this proposed exercises section should be much greater that that spent on the solved exercises section.
Experience says that we should dedicate 80% of the time to individual problem solving and the other 20% to analyzing and coding problems already solved by other people.

It is vitally important to become a good programmer to be able to solve problems individually.

WRITE A PROGRAM THAT REQUEST TO ENTER 10 STUDENT GRADES AND INFORMS US HOW MANY HAVE GRADES GREATER THAN OR EQUAL TO 7 AND HOW MANY HAVE GRADES GREATER THAN OR EQUAL TO 7 AND HOW MANY HAVE GRADES LOWER THAN OR EQUAL TO 7. 

A SET OF N PERSON HEIGTS ARE ENTERED PER KEYBOARD. SHOW THE AVERAGE HEIGHT OF PEOPLE.

IN A COMPANY THERE ARE N EMPLOYEES WHOSE SALARIES RANGE BETWEEN $100 AND $500, CREATE A PROGRAM THAT READS THE SALARIES THAT EACH EMPLOYEE EARNS AND REPORTS HOW MANY EMPLOYEES EARN BETWEEN $100 AND $300 AND HOW MANY EARN MORE THAN $300. ADDITIONALLY, THE PROGRAM MUST REPORT THE AMOUNT THE COMPANY SPENDS ON STAFF SALARIES.

CREATE A PROGRAM THAT PRINTS 25 TERMS OF THE SERIES 11-22-33-44 ETC(VALUES ARE NOT ENTERED BY KEYBOARD)

SHOW MULTIPLES OF 8 UP TO THE VALUE 500. 8-16-24, ETC. SHOULD APPEAR ON THE SCREEN.

CREATE A PROGRAM THAT ALLOWS YOU TO LOAD TWO LISTS OF 15 VALUES EACH. INFORM WITH A MESSAGE WHICH OF THE TWO LISTS HAS A GREATER ACCUMULATED VALUE(MESSAGES LIST 1 GREATER, LIST2 GREATER, LIST EQUAL)
KEEP IN MIND THAT THERE MAY BE TWO OR MORE REPETITIVE STRUCTURES IN AN ALGORITHM.

DEVELOP A PROGRAM THAT ALLOWS US TO LOAD N INTEGERS AND THEN INFORM US HOW MANY VALUES WERE EVEN AND HOW MANY WERE ODD.
USE THE % OPERATOR IN THE CONDITION OF THE CONDITIONAL STRUCTURE(THIS OPERATOR RETURNS THE REMAINDER OF THE DIVISION OF TWO VALUES, FOR EXAMPLE 11%2 RETURNS A 1)

if value%2==0:

10- Repetitive structure for.

Any problem requires a repetitive structure can be solved using the while structure, but there is another repetitive structure whose approach is simpler in certain situations where we have to go through a list of data.

In general, the repetitive for structure is used in those situations in which we want a variable to take a value from a defined list of values.

We will see with a series of examples the use of for.

Problem 1:
CREATE A PROGRAM THAT PRINTS THE NUMBERS FROM 0 TO 100 ON THE SCREEN. WE CAN SOLVE THIS PROBLEM PERFECTLY WITH THE WHILE LOOP, BUT IN THIS SITUATION WE WILL SOLVE IT USING THE FOR.

Program: exercise39.py

for x in range(101):
    print(x)

We first have the for keyword and then tha name of the variable that will store the integer value returned by the range function in each return of for.

The range function returns the value 0 the first time and is stored in x, then 1 and so on until it returns the value that we passed to range minus one(that is, in our example it ultimately returns 100)

Let´s keep in mind that this same problem solved, with the while structure should be:
program: exercise40.py
x=0
while x<101:
    print(x)
    x=x+1

Problem 2:
CREATE A PROGRAM THAT PRINTS THE NUMBERS 20 TO 30 ON THE SCREEN.

PROGRAM: exercise41.py
for x in range(20,31):
    print(x)


